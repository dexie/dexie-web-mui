1:"$Sreact.fragment"
3:I[52669,["/_next/static/chunks/5a665d09998d4862.js","/_next/static/chunks/5dd0231c54ee754c.js","/_next/static/chunks/8f22b4bf63a49712.js","/_next/static/chunks/68e80996639386d6.js","/_next/static/chunks/ff5f09f4edae29eb.js"],"default"]
4:I[17350,["/_next/static/chunks/5a665d09998d4862.js","/_next/static/chunks/5dd0231c54ee754c.js","/_next/static/chunks/8f22b4bf63a49712.js","/_next/static/chunks/68e80996639386d6.js","/_next/static/chunks/ff5f09f4edae29eb.js"],"default"]
5:I[11054,["/_next/static/chunks/5a665d09998d4862.js","/_next/static/chunks/5dd0231c54ee754c.js","/_next/static/chunks/8f22b4bf63a49712.js","/_next/static/chunks/68e80996639386d6.js","/_next/static/chunks/ff5f09f4edae29eb.js"],"default"]
6:I[53675,["/_next/static/chunks/5a665d09998d4862.js","/_next/static/chunks/5dd0231c54ee754c.js","/_next/static/chunks/8f22b4bf63a49712.js","/_next/static/chunks/68e80996639386d6.js","/_next/static/chunks/ff5f09f4edae29eb.js"],"default"]
7:I[45678,["/_next/static/chunks/5a665d09998d4862.js","/_next/static/chunks/5dd0231c54ee754c.js","/_next/static/chunks/8f22b4bf63a49712.js","/_next/static/chunks/68e80996639386d6.js","/_next/static/chunks/ff5f09f4edae29eb.js"],"default"]
8:I[39756,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
9:I[37457,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
11:I[68027,["/_next/static/chunks/5a665d09998d4862.js","/_next/static/chunks/5dd0231c54ee754c.js","/_next/static/chunks/8f22b4bf63a49712.js","/_next/static/chunks/68e80996639386d6.js","/_next/static/chunks/ff5f09f4edae29eb.js"],"default"]
:HL["/_next/static/chunks/181ad6fb1547b71a.css","style"]
:HL["/_next/static/media/797e433ab948586e-s.p.dbea232f.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/caa3a2e1cccd8315-s.p.853070df.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/ce62453a442c7f35-s.p.a9507876.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
2:T60b,{"@context":"https://schema.org","@type":"SoftwareApplication","name":"Dexie.js","description":"IndexedDB wrapper library for offline-first web applications with real-time sync capabilities","url":"https://dexie.org","applicationCategory":"DeveloperApplication","operatingSystem":"Web Browser","programmingLanguage":"JavaScript","author":{"@type":"Person","name":"David Fahlander","url":"https://github.com/dfahlander"},"publisher":{"@type":"Organization","name":"Awarica AB","address":{"@type":"PostalAddress","addressCountry":"SE","addressLocality":"Stockholm"}},"softwareVersion":"4.0","downloadUrl":"https://www.npmjs.com/package/dexie","license":"https://github.com/dexie/Dexie.js/blob/master/LICENSE","codeRepository":"https://github.com/dexie/Dexie.js","installUrl":"https://www.npmjs.com/package/dexie","screenshot":"https://dexie.org/assets/images/dexie-hero-og.jpg","offers":[{"@type":"Offer","name":"Dexie.js Open Source","price":"0","priceCurrency":"USD","description":"Free IndexedDB wrapper library"},{"@type":"Offer","name":"Dexie Cloud Free","price":"0","priceCurrency":"USD","description":"Free tier with 3 production users and 100MB storage"},{"@type":"Offer","name":"Dexie Cloud Production","price":"0.12","priceCurrency":"USD","description":"Production tier starting at $0.12 per user per month"}],"featureList":["Offline-first database","IndexedDB wrapper","Real-time synchronization","Authentication system","Collaborative features","React integration","Vue.js support","Angular compatibility","Progressive Web App support"]}0:{"P":null,"b":"_DLZGMyVmlPWiqBxqcxG-","p":"","c":["","cloud","docs","best-practices"],"i":false,"f":[[["",{"children":["cloud",{"children":["docs",{"children":[["slug","best-practices","c"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/181ad6fb1547b71a.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","script","script-0",{"src":"/_next/static/chunks/5a665d09998d4862.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/5dd0231c54ee754c.js","async":true,"nonce":"$undefined"}],["$","script","script-2",{"src":"/_next/static/chunks/8f22b4bf63a49712.js","async":true,"nonce":"$undefined"}],["$","script","script-3",{"src":"/_next/static/chunks/68e80996639386d6.js","async":true,"nonce":"$undefined"}],["$","script","script-4",{"src":"/_next/static/chunks/ff5f09f4edae29eb.js","async":true,"nonce":"$undefined"}]],["$","html",null,{"lang":"en","className":"roboto_d24be3b7-module__pZO6tq__variable","children":[["$","head",null,{"children":["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"$2"}}]}],["$","body",null,{"className":"geist_a71539c9-module__T19VSG__variable geist_mono_8d43a2aa-module__8Li5zG__variable","children":["$","$L3",null,{"children":["$","$L4",null,{"theme":"$5","children":[["$","$L6",null,{}],["$","$L7",null,{}],["$","$L8",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],"$La"]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],"$Lb"]}]}]}]]}]]}],{"children":["cloud","$Lc",{"children":["docs","$Ld",{"children":[["slug","best-practices","c"],"$Le",{"children":["__PAGE__","$Lf",{},null,false]},null,false]},null,false]},null,false]},null,false],"$L10",false]],"m":"$undefined","G":["$11",["$L12"]],"s":false,"S":true}
13:I[13642,["/_next/static/chunks/5a665d09998d4862.js","/_next/static/chunks/5dd0231c54ee754c.js","/_next/static/chunks/8f22b4bf63a49712.js","/_next/static/chunks/68e80996639386d6.js","/_next/static/chunks/ff5f09f4edae29eb.js"],"default"]
15:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"OutletBoundary"]
17:I[11533,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"AsyncMetadataOutlet"]
19:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"ViewportBoundary"]
1b:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"MetadataBoundary"]
1c:"$Sreact.suspense"
a:["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]
b:["$","$L13",null,{}]
c:["$","$1","c",{"children":[null,["$","$L8",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
d:["$","$1","c",{"children":[null,["$","$L8",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
e:["$","$1","c",{"children":[null,["$","$L8",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
f:["$","$1","c",{"children":["$L14",[["$","script","script-0",{"src":"/_next/static/chunks/5c1b8a0822c1757e.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/468ad4deeea646ae.js","async":true,"nonce":"$undefined"}]],["$","$L15",null,{"children":["$L16",["$","$L17",null,{"promise":"$@18"}]]}]]}]
10:["$","$1","h",{"children":[null,[["$","$L19",null,{"children":"$L1a"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$L1b",null,{"children":["$","div",null,{"hidden":true,"children":["$","$1c",null,{"fallback":null,"children":"$L1d"}]}]}]]}]
12:["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/181ad6fb1547b71a.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]
1e:I[95122,["/_next/static/chunks/5a665d09998d4862.js","/_next/static/chunks/5dd0231c54ee754c.js","/_next/static/chunks/8f22b4bf63a49712.js","/_next/static/chunks/68e80996639386d6.js","/_next/static/chunks/ff5f09f4edae29eb.js","/_next/static/chunks/5c1b8a0822c1757e.js","/_next/static/chunks/468ad4deeea646ae.js"],"default"]
14:["$","$L1e",null,{"navigation":{"DBPermissionSet":{"title":"DBPermissionSet","slug":"DBPermissionSet","layout":"docs-dexie-cloud"},"DexieCloudOptions":{"title":"DexieCloudOptions","slug":"DexieCloudOptions","layout":"docs-dexie-cloud"},"Invite":{"title":"Invite","slug":"Invite","layout":"docs-dexie-cloud"},"Member":{"title":"Member","slug":"Member","layout":"docs-dexie-cloud"},"PersistedSyncState":{"title":"PersistedSyncState","slug":"PersistedSyncState","layout":"docs-dexie-cloud"},"Realm":{"title":"Realm","slug":"Realm","layout":"docs-dexie-cloud"},"Role":{"title":"Role","slug":"Role","layout":"docs-dexie-cloud"},"SyncState":{"title":"SyncState","slug":"SyncState","layout":"docs-dexie-cloud"},"UserLogin":{"title":"UserLogin","slug":"UserLogin","layout":"docs-dexie-cloud"},"access-control":{"title":"Access Control in Dexie Cloud","slug":"access-control","layout":"docs-dexie-cloud"},"add-demo-users":{"title":"Add demo users","slug":"add-demo-users","layout":"docs-dexie-cloud"},"add-public-data":{"title":"Add public data","slug":"add-public-data","layout":"docs-dexie-cloud"},"authentication":{"title":"Authentication in Dexie Cloud","slug":"authentication","layout":"docs-dexie-cloud"},"best-practices":{"title":"Dexie Cloud Best Practices","slug":"best-practices","layout":"docs-dexie-cloud"},"cli":{"title":"Dexie Cloud CLI","slug":"cli","layout":"docs-dexie-cloud"},"consistency":{"title":"Consistency in Dexie Cloud","slug":"consistency","layout":"docs-dexie-cloud"},"custom-emails":{"title":"Custom Emails in Dexie Cloud","slug":"custom-emails","layout":"docs-dexie-cloud"},"db.cloud.configure()":{"title":"db.cloud.configure()","slug":"db.cloud.configure()","layout":"docs-dexie-cloud"},"db.cloud.currentUser":{"title":"db.cloud.currentUser","slug":"db.cloud.currentUser","layout":"docs-dexie-cloud"},"db.cloud.currentUserId":{"title":"db.cloud.currentUserId","slug":"db.cloud.currentUserId","layout":"docs-dexie-cloud"},"db.cloud.events.syncComplete":{"title":"db.cloud.events.syncComplete","slug":"db.cloud.events.syncComplete","layout":"docs-dexie-cloud"},"db.cloud.invites":{"title":"db.cloud.invites","slug":"db.cloud.invites","layout":"docs-dexie-cloud"},"db.cloud.login()":{"title":"db.cloud.login()","slug":"db.cloud.login()","layout":"docs-dexie-cloud"},"db.cloud.logout()":{"title":"db.cloud.logout()","slug":"db.cloud.logout()","layout":"docs-dexie-cloud"},"db.cloud.options":{"title":"db.cloud.options","slug":"db.cloud.options","layout":"docs-dexie-cloud"},"db.cloud.permissions()":{"title":"db.cloud.permissions()","slug":"db.cloud.permissions()","layout":"docs-dexie-cloud"},"db.cloud.persistedSyncState":{"title":"db.cloud.persistedSyncState","slug":"db.cloud.persistedSyncState","layout":"docs-dexie-cloud"},"db.cloud.roles":{"title":"db.cloud.roles","slug":"db.cloud.roles","layout":"docs-dexie-cloud"},"db.cloud.schema":{"title":"db.cloud.schema","slug":"db.cloud.schema","layout":"docs-dexie-cloud"},"db.cloud.sync()":{"title":"db.cloud.sync()","slug":"db.cloud.sync()","layout":"docs-dexie-cloud"},"db.cloud.syncState":{"title":"db.cloud.syncState","slug":"db.cloud.syncState","layout":"docs-dexie-cloud"},"db.cloud.userInteraction":{"title":"db.cloud.userInteraction","slug":"db.cloud.userInteraction","layout":"docs-dexie-cloud"},"db.cloud.usingServiceWorker":{"title":"db.cloud.usingServiceWorker","slug":"db.cloud.usingServiceWorker","layout":"docs-dexie-cloud"},"db.cloud.version":{"title":"db.cloud.version","slug":"db.cloud.version","layout":"docs-dexie-cloud"},"db.cloud.webSocketStatus":{"title":"db.cloud.webSocketStatus","slug":"db.cloud.webSocketStatus","layout":"docs-dexie-cloud"},"db.members":{"title":"db.members","slug":"db.members","layout":"docs-dexie-cloud"},"db.realms":{"title":"db.realms","slug":"db.realms","layout":"docs-dexie-cloud"},"db.roles":{"title":"db.roles","slug":"db.roles","layout":"docs-dexie-cloud"},"dexie-cloud-addon":{"title":"dexie-cloud-addon","slug":"dexie-cloud-addon","layout":"docs-dexie-cloud"},"dexie-cloud-api":{"title":"Dexie Cloud API","slug":"dexie-cloud-api","layout":"docs-dexie-cloud"},"index":{"title":"Dexie Cloud Docs","slug":"index","layout":"docs-dexie-cloud"},"limits":{"title":"Dexie Cloud API Limits","slug":"limits","layout":"docs-dexie-cloud"},"premium-software":{"title":"Run Dexie Cloud on Own Servers","slug":"premium-software","layout":"docs-dexie-cloud"},"quickstart":{"title":"Dexie Cloud Quickstart","slug":"quickstart","layout":"docs-dexie-cloud"},"rest-api":{"title":"Dexie Cloud REST API","slug":"rest-api","layout":"docs-dexie-cloud"},"scaling":{"title":"Sharding and Scalability","slug":"scaling","layout":"docs-dexie-cloud"},"web-hooks":{"title":"Dexie Cloud Web Hooks","slug":"web-hooks","layout":"docs-dexie-cloud"}},"currentSlug":"docs/best-practices","pageTitle":"Dexie Cloud Best Practices","children":"$L1f"}]
20:I[19646,["/_next/static/chunks/5a665d09998d4862.js","/_next/static/chunks/5dd0231c54ee754c.js","/_next/static/chunks/8f22b4bf63a49712.js","/_next/static/chunks/68e80996639386d6.js","/_next/static/chunks/ff5f09f4edae29eb.js","/_next/static/chunks/5c1b8a0822c1757e.js","/_next/static/chunks/468ad4deeea646ae.js"],"default"]
21:I[26863,["/_next/static/chunks/5a665d09998d4862.js","/_next/static/chunks/5dd0231c54ee754c.js","/_next/static/chunks/8f22b4bf63a49712.js","/_next/static/chunks/68e80996639386d6.js","/_next/static/chunks/ff5f09f4edae29eb.js","/_next/static/chunks/5c1b8a0822c1757e.js","/_next/static/chunks/468ad4deeea646ae.js"],"default"]
22:I[72729,["/_next/static/chunks/5a665d09998d4862.js","/_next/static/chunks/5dd0231c54ee754c.js","/_next/static/chunks/8f22b4bf63a49712.js","/_next/static/chunks/68e80996639386d6.js","/_next/static/chunks/ff5f09f4edae29eb.js","/_next/static/chunks/5c1b8a0822c1757e.js","/_next/static/chunks/468ad4deeea646ae.js"],"default"]
1f:["$","$L20",null,{"component":"article","children":[["$","$L20",null,{"component":"header","sx":{"mb":5},"children":["$","$L21",null,{"variant":"h1","component":"h1","sx":{"mb":3},"children":"Dexie Cloud Best Practices"}]}],["$","$L20",null,{"className":"docs-content","children":["$","$L20",null,{"className":"mdx-content","sx":{"maxWidth":"none"},"children":[["$","$L21","mdx-1",{"variant":"body1","component":"div","paragraph":true,"children":"To maintain consistency across distributed data, there are a number of best practices to consider. This page takes you through the practices to adopt when using Dexie Cloud."}],"\n",["$","$L21","mdx-2",{"variant":"h3","component":"h3","gutterBottom":true,"sx":{"mt":3},"children":"Primary Keys"}],"\n",["$","$L21","mdx-7",{"variant":"body1","component":"div","paragraph":true,"children":["☞ Don't use auto-incremented keys (",["$","$L20","mdx-3",{"component":"code","sx":{"fontFamily":"monospace","fontSize":"0.875rem","backgroundColor":"rgba(255, 255, 255, 0.1)","px":1,"py":0.5,"borderRadius":1},"children":"++id"}],"). Use ",["$","$L20","mdx-4",{"component":"code","sx":{"fontFamily":"monospace","fontSize":"0.875rem","backgroundColor":"rgba(255, 255, 255, 0.1)","px":1,"py":0.5,"borderRadius":1},"children":"@id"}]," (auto-generated) or just ",["$","$L20","mdx-5",{"component":"code","sx":{"fontFamily":"monospace","fontSize":"0.875rem","backgroundColor":"rgba(255, 255, 255, 0.1)","px":1,"py":0.5,"borderRadius":1},"children":"id"}],", providing own strings with entropy enough for global uniqueness, such as GUIDs. See ",["$","$L22","mdx-6",{"href":"#examples-primary-keys","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"examples"}],"."]}],"\n",["$","$L21","mdx-8",{"variant":"body1","component":"div","paragraph":true,"children":"☞ Primary key column must be string unless the primary key is a compound primary key, in which case it will be an array of strings or numbers."}],"\n",["$","$L21","mdx-13",{"variant":"body1","component":"div","paragraph":true,"children":["☞ Primary keys on ",["$","$L20","mdx-9",{"component":"code","sx":{"fontFamily":"monospace","fontSize":"0.875rem","backgroundColor":"rgba(255, 255, 255, 0.1)","px":1,"py":0.5,"borderRadius":1},"children":"@"}],"-tables must be prefixed with a dedicated 3-letter defined in ",["$","$L22","mdx-10",{"href":"/cloud/docs/db.cloud.schema","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"db.cloud.schema[tableName]"}],". This rule does only apply in auto-generated primary keys (declared as ",["$","$L20","mdx-11",{"component":"code","sx":{"fontFamily":"monospace","fontSize":"0.875rem","backgroundColor":"rgba(255, 255, 255, 0.1)","px":1,"py":0.5,"borderRadius":1},"children":"@<primary key field>"}]," ) See ",["$","$L22","mdx-12",{"href":"/cloud/docs/db.cloud.schema","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"db.cloud.schema"}]]}],"\n",["$","$L21","mdx-16",{"variant":"body1","component":"div","paragraph":true,"children":["☞ For ",["$","$L22","mdx-14",{"href":"/docs/Compound-Index#compound-primary-key","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"compound primary keys"}],", they need to be composed from string columns only, or a combination of string and number columns and their composition must have entropy enough to be globally unique. See ",["$","$L22","mdx-15",{"href":"#examples-primary-keys","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"examples"}]]}],"\n",["$","$L21","mdx-18",{"variant":"body1","component":"div","paragraph":true,"children":["☞ If one row has a 1-1 relationship with another row in the same or different table, it is wise to generate its ID from the computation of the other ID in order to allow consistent deletion of related rows (see example later down...). See ",["$","$L22","mdx-17",{"href":"#examples-primary-keys","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"examples"}]]}],"\n",["$","$L21","mdx-22",{"variant":"body1","component":"div","paragraph":true,"children":["☞ Never change the primary keys of a table. If you need to migrate, create another table and migrate the data using ",["$","$L22","mdx-19",{"href":"rest-api","color":"primary","sx":{"fontWeight":600},"underline":"hover","target":"_blank","rel":"noopener noreferrer","children":"REST"}]," or ",["$","$L22","mdx-20",{"href":"cli#export","color":"primary","sx":{"fontWeight":600},"underline":"hover","target":"_blank","rel":"noopener noreferrer","children":"cli export"}]," / ","$L23","."]}],"\n","$L24","\n","$L25","\n","$L26","\n","$L27","\n","$L28","\n","$L29","\n","$L2a","\n","$L2b","\n","$L2c","\n","$L2d","\n","$L2e","\n","$L2f","\n","$L30","\n","$L31","\n","$L32","\n","$L33","\n","$L34","\n","$L35","\n","$L36","\n","$L37","\n","$L38","\n","$L39","\n","$L3a","\n","$L3b","\n","$L3c","\n","$L3d","\n","$L3e","\n","$L3f","\n","$L40","\n","$L41","\n","$L42","\n","$L43","\n","$L44","\n","$L45","\n","$L46","\n","$L47","\n","$L48","\n","$L49","\n","$L4a","\n","$L4b","\n","$L4c","\n","$L4d","\n","$L4e","\n","$L4f","\n"]}]}],"$L50"]}]
51:I[63876,["/_next/static/chunks/5a665d09998d4862.js","/_next/static/chunks/5dd0231c54ee754c.js","/_next/static/chunks/8f22b4bf63a49712.js","/_next/static/chunks/68e80996639386d6.js","/_next/static/chunks/ff5f09f4edae29eb.js","/_next/static/chunks/5c1b8a0822c1757e.js","/_next/static/chunks/468ad4deeea646ae.js"],"default"]
58:I[32412,["/_next/static/chunks/5a665d09998d4862.js","/_next/static/chunks/5dd0231c54ee754c.js","/_next/static/chunks/8f22b4bf63a49712.js","/_next/static/chunks/68e80996639386d6.js","/_next/static/chunks/ff5f09f4edae29eb.js","/_next/static/chunks/5c1b8a0822c1757e.js","/_next/static/chunks/468ad4deeea646ae.js"],"default"]
59:I[65801,["/_next/static/chunks/5a665d09998d4862.js","/_next/static/chunks/5dd0231c54ee754c.js","/_next/static/chunks/8f22b4bf63a49712.js","/_next/static/chunks/68e80996639386d6.js","/_next/static/chunks/ff5f09f4edae29eb.js","/_next/static/chunks/5c1b8a0822c1757e.js","/_next/static/chunks/468ad4deeea646ae.js"],"default"]
23:["$","$L22","mdx-21",{"href":"cli#import","color":"primary","sx":{"fontWeight":600},"underline":"hover","target":"_blank","rel":"noopener noreferrer","children":"import"}]
24:["$","$L21","mdx-23",{"variant":"h3","component":"h3","gutterBottom":true,"sx":{"mt":3},"children":"Migration"}]
25:["$","$L21","mdx-26",{"variant":"body1","component":"div","paragraph":true,"children":["☞ Don't use ",["$","$L22","mdx-24",{"href":"/docs/Version/Version.upgrade()","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"Version.upgrade()"}]," except for non-synced tables. Migrations can never be consistently performed at the client side when table is synced. See ",["$","$L22","mdx-25",{"href":"#examples-migration","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"examples"}]]}]
26:["$","$L21","mdx-31",{"variant":"body1","component":"div","paragraph":true,"children":["☞ Don't populate data in ",["$","$L22","mdx-27",{"href":"/docs/Dexie/Dexie.on.populate","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"Dexie.on.populate"}],". You can use the ",["$","$L20","mdx-28",{"component":"code","sx":{"fontFamily":"monospace","fontSize":"0.875rem","backgroundColor":"rgba(255, 255, 255, 0.1)","px":1,"py":0.5,"borderRadius":1},"children":"populate"}]," event but only to register the ",["$","$L22","mdx-29",{"href":"/docs/Dexie/Dexie.on.ready","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"ready"}]," event and perform it from there. See ",["$","$L22","mdx-30",{"href":"#examples-migration","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"examples"}]]}]
27:["$","$L21","mdx-34",{"variant":"body1","component":"div","paragraph":true,"children":["☞ Only populate ",["$","$L22","mdx-32",{"href":"consistency#private-singleton-ids","color":"primary","sx":{"fontWeight":600},"underline":"hover","target":"_blank","rel":"noopener noreferrer","children":"private singletons"}],". This prohibits the data from being populated several times for the same account. See ",["$","$L22","mdx-33",{"href":"#examples-migration","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"examples"}]]}]
28:["$","$L21","mdx-35",{"variant":"h3","component":"h3","gutterBottom":true,"sx":{"mt":3},"children":"Consistent Operations"}]
29:["$","$L21","mdx-36",{"variant":"body1","component":"div","paragraph":true,"children":"☞ Declare transaction block when multiple operations should be bundled into an atomic all-or-nothing operation in the cloud."}]
2a:["$","$L21","mdx-38",{"variant":"body1","component":"div","paragraph":true,"children":["☞ To get full consistency, avoid reading + JS condition + writing. Instead formulate the condition in a where-clause with a modify expression attached to it. This will persist the condition on the cloud and reexecute it on sync. See ",["$","$L22","mdx-37",{"href":"#examples-consistent-operations","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"examples"}]]}]
2b:["$","br","mdx-39",{}]
2c:["$","br","mdx-40",{}]
2d:["$","$L21","mdx-41",{"variant":"h1","component":"h1","gutterBottom":true,"children":"Examples"}]
2e:["$","$L21","mdx-42",{"variant":"h2","component":"h2","gutterBottom":true,"sx":{"mt":4},"children":"Examples: Primary Keys"}]
2f:["$","$L21","mdx-43",{"variant":"h3","component":"h3","gutterBottom":true,"sx":{"mt":3},"children":"Example 1: Let dexie-cloud-addon generate primary keys:"}]
52:T960,db<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stores</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  items<span class="token operator">:</span> <span class="token string">'@id'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// No need to specify the key here, just the other properties:</span>
  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> bar <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// id will be something like 'itm0OroMWmdWtMgzS5Udb2dfysp'</span>

  <span class="token comment">// Now let's fetch the added item back from the local DB and see what we've got there:</span>
  <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>

  <span class="token comment">// item will be something like:</span>
  <span class="token comment">// {</span>
  <span class="token comment">//   id: "itm0OroMWmdWtMgzS5Udb2dfysp",</span>
  <span class="token comment">//   foo: "bar",</span>
  <span class="token comment">//   owner: "you@domain.com",</span>
  <span class="token comment">//   realmId: "you@domain.com"</span>
  <span class="token comment">// }</span>
<span class="token punctuation">}</span>
30:["$","$1","40",{"children":["$","$L20","mdx-44",{"sx":{"mb":3,"background":"rgba(255, 255, 255, 0.05)","borderRadius":2,"border":"1px solid rgba(255, 255, 255, 0.1)","p":3,"mt":2,"overflow":"auto"},"children":["$","div",null,{"className":"codeblock-container","style":{"position":"relative"},"children":[["$","$L51",null,{"code":"db.version(1).stores({\n  items: '@id',\n})\n\nasync function doSomething() {\n  // No need to specify the key here, just the other properties:\n  const id = await db.items.add({ foo: bar })\n  // id will be something like 'itm0OroMWmdWtMgzS5Udb2dfysp'\n\n  // Now let's fetch the added item back from the local DB and see what we've got there:\n  const item = await db.items.get(id)\n\n  // item will be something like:\n  // {\n  //   id: \"itm0OroMWmdWtMgzS5Udb2dfysp\",\n  //   foo: \"bar\",\n  //   owner: \"you@domain.com\",\n  //   realmId: \"you@domain.com\"\n  // }\n}\n"}],["$","pre",null,{"className":"prism-ts","children":["$","code",null,{"className":"prism-ts code-highlight","dangerouslySetInnerHTML":{"__html":"$52"}}]}]]}]}]}]
31:["$","$L21","mdx-46",{"variant":"body1","component":"div","paragraph":true,"children":["When using ",["$","$L20","mdx-45",{"component":"code","sx":{"fontFamily":"monospace","fontSize":"0.875rem","backgroundColor":"rgba(255, 255, 255, 0.1)","px":1,"py":0.5,"borderRadius":1},"children":"@"}],", the keys will start with 3 letters representing a shortening of the table name ('itm' for 'items', 'frn' for 'friends' etc). The prefix of the ID reveals which table it belongs to. @-tables will encforce that policy and never accept keys that do not start with this 3-letter shorteing of the table name. Even if the table would be renamed later, the 3-letter shortening will stay the same throughout the database lifetime."]}]
32:["$","$L21","mdx-47",{"variant":"h3","component":"h3","gutterBottom":true,"sx":{"mt":3},"children":"Example 2: Generate your own random strings"}]
53:Ta2b,db<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stores</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  items<span class="token operator">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token comment">// No need to prefix id with @ if it's not auto-generated</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// No need to specify the key here, just the other properties:</span>
  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">generateRandomString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Generate a unique string, such as a GUID.</span>
  <span class="token keyword">await</span> db<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> bar<span class="token punctuation">,</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// Provide ID explicitely.</span>
  <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
  <span class="token comment">// item will be something like:</span>
  <span class="token comment">// {</span>
  <span class="token comment">//   id: "ed3a25c3-9f08-4b5e-879d-d6ca8cc371ea",</span>
  <span class="token comment">//   foo: "bar",</span>
  <span class="token comment">//   owner: "you@domain.com",</span>
  <span class="token comment">//   realmId: "you@domain.com"</span>
  <span class="token comment">// }</span>
<span class="token punctuation">}</span>
33:["$","$1","46",{"children":["$","$L20","mdx-48",{"sx":{"mb":3,"background":"rgba(255, 255, 255, 0.05)","borderRadius":2,"border":"1px solid rgba(255, 255, 255, 0.1)","p":3,"mt":2,"overflow":"auto"},"children":["$","div",null,{"className":"codeblock-container","style":{"position":"relative"},"children":[["$","$L51",null,{"code":"db.version(1).stores({\n  items: 'id', // No need to prefix id with @ if it's not auto-generated\n})\n\nasync function doSomething() {\n  // No need to specify the key here, just the other properties:\n  const id = generateRandomString() // Generate a unique string, such as a GUID.\n  await db.items.add({ foo: bar, id }) // Provide ID explicitely.\n  const item = await db.items.get(id)\n  // item will be something like:\n  // {\n  //   id: \"ed3a25c3-9f08-4b5e-879d-d6ca8cc371ea\",\n  //   foo: \"bar\",\n  //   owner: \"you@domain.com\",\n  //   realmId: \"you@domain.com\"\n  // }\n}\n"}],["$","pre",null,{"className":"prism-ts","children":["$","code",null,{"className":"prism-ts code-highlight","dangerouslySetInnerHTML":{"__html":"$53"}}]}]]}]}]}]
34:["$","$L21","mdx-49",{"variant":"h3","component":"h3","gutterBottom":true,"sx":{"mt":3},"children":"Example 3: Compute ID from other ID (1-1 relationships)"}]
54:T5b5,function shareTodoList(todoList) {
  // When making a todo-list sharable, we need to create a realm that is 1-1 tied to the todo-list:
  const computedRealmId = getTiedRealmId(todoList.id)
  return db.transaction('rw', db.todoLists, db.realms, db.members, () => {
    db.realms.upsert(
      computedRealmId, // Use a primary key computed from the main object in the realm.
      {
        name: todoList.name,
        represents: 'a to-do list',
      }
    )
    db.todoLists.update(todoList.id, {
      realmId: computedRealmId, // move todo-list into new realm
    })
    db.todoItems
      .where({ todoListId: todoList.id })
      .modify({ realmId: computedRealmId }) // move its items into realm as well
  })
}

// Delete it with 100% consistency (no matter if has been shared or not)
function deleteTodoList(todoListId) {
  return db.transaction('rw', db.todoLists, db.realms, db.todoItems, () => {
    // Delete related todo-items
    db.todoItems.where({ todoListId: todoListId }).delete()
    // Delete the list
    db.todoLists.delete(todoListId)
    // In case it has been shared (maybe by another off-line client),
    // delete any corresponding realm.
    // (Don't delete members to avoid 'sawing off your own branch'.
    //  instead members will be cascade deleted by the server and your local
    //  members will be deleted on next sync)
    const computedRealmId = getTiedRealmId(todoList.id)
    db.realms.delete(computedRealmId)
  })
}
55:T19a7,<span class="token keyword">function</span> <span class="token function">shareTodoList</span><span class="token punctuation">(</span>todoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// When making a todo-list sharable, we need to create a realm that is 1-1 tied to the todo-list:</span>
  <span class="token keyword">const</span> computedRealmId <span class="token operator">=</span> <span class="token function">getTiedRealmId</span><span class="token punctuation">(</span>todoList<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
  <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">'rw'</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span>todoLists<span class="token punctuation">,</span> db<span class="token punctuation">.</span>realms<span class="token punctuation">,</span> db<span class="token punctuation">.</span>members<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    db<span class="token punctuation">.</span>realms<span class="token punctuation">.</span><span class="token function">upsert</span><span class="token punctuation">(</span>
      computedRealmId<span class="token punctuation">,</span> <span class="token comment">// Use a primary key computed from the main object in the realm.</span>
      <span class="token punctuation">{</span>
        name<span class="token operator">:</span> todoList<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
        represents<span class="token operator">:</span> <span class="token string">'a to-do list'</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
    db<span class="token punctuation">.</span>todoLists<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>todoList<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      realmId<span class="token operator">:</span> computedRealmId<span class="token punctuation">,</span> <span class="token comment">// move todo-list into new realm</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    db<span class="token punctuation">.</span>todoItems
      <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span> todoListId<span class="token operator">:</span> todoList<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> realmId<span class="token operator">:</span> computedRealmId <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// move its items into realm as well</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Delete it with 100% consistency (no matter if has been shared or not)</span>
<span class="token keyword">function</span> <span class="token function">deleteTodoList</span><span class="token punctuation">(</span>todoListId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">'rw'</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span>todoLists<span class="token punctuation">,</span> db<span class="token punctuation">.</span>realms<span class="token punctuation">,</span> db<span class="token punctuation">.</span>todoItems<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// Delete related todo-items</span>
    db<span class="token punctuation">.</span>todoItems<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span> todoListId<span class="token operator">:</span> todoListId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// Delete the list</span>
    db<span class="token punctuation">.</span>todoLists<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>todoListId<span class="token punctuation">)</span>
    <span class="token comment">// In case it has been shared (maybe by another off-line client),</span>
    <span class="token comment">// delete any corresponding realm.</span>
    <span class="token comment">// (Don't delete members to avoid 'sawing off your own branch'.</span>
    <span class="token comment">//  instead members will be cascade deleted by the server and your local</span>
    <span class="token comment">//  members will be deleted on next sync)</span>
    <span class="token keyword">const</span> computedRealmId <span class="token operator">=</span> <span class="token function">getTiedRealmId</span><span class="token punctuation">(</span>todoList<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
    db<span class="token punctuation">.</span>realms<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>computedRealmId<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
35:["$","$1","50",{"children":["$","$L20","mdx-50",{"sx":{"mb":3,"background":"rgba(255, 255, 255, 0.05)","borderRadius":2,"border":"1px solid rgba(255, 255, 255, 0.1)","p":3,"mt":2,"overflow":"auto"},"children":["$","div",null,{"className":"codeblock-container","style":{"position":"relative"},"children":[["$","$L51",null,{"code":"$54"}],["$","pre",null,{"className":"prism-ts","children":["$","code",null,{"className":"prism-ts code-highlight","dangerouslySetInnerHTML":{"__html":"$55"}}]}]]}]}]}]
36:["$","$L21","mdx-54",{"variant":"body1","component":"div","paragraph":true,"children":["The above sample shows the purpose of using a computed ID - as deletions can be done consistently for 1-1 related entities. In the sample above we're using ",["$","$L20","mdx-51",{"component":"code","sx":{"fontFamily":"monospace","fontSize":"0.875rem","backgroundColor":"rgba(255, 255, 255, 0.1)","px":1,"py":0.5,"borderRadius":1},"children":"getTiedRealmId()"}]," from dexie-cloud-addon but you can also use any custom way to compute an ID from another ID. If the id is declared with ",["$","$L20","mdx-52",{"component":"code","sx":{"fontFamily":"monospace","fontSize":"0.875rem","backgroundColor":"rgba(255, 255, 255, 0.1)","px":1,"py":0.5,"borderRadius":1},"children":"@"}],", just make sure the primary key will be prefixed with 3-letter shortname of the table, available in ",["$","$L22","mdx-53",{"href":"/cloud/docs/db.cloud.schema","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"db.cloud.schema[tableName]"}],"."]}]
37:["$","$L21","mdx-55",{"variant":"h3","component":"h3","gutterBottom":true,"sx":{"mt":3},"children":"Example 4: Compose primary keys from referred keys and other properties:"}]
56:Td9b,db<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stores</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  friends<span class="token operator">:</span> <span class="token string">'@id'</span><span class="token punctuation">,</span>
  friendRelations<span class="token operator">:</span> <span class="token string">'[friend1Id+friend2Id+label]'</span><span class="token punctuation">,</span> <span class="token comment">// unique because referred to unique ids</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">createTwoLovingFriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">'rw'</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span>friends<span class="token punctuation">,</span> db<span class="token punctuation">.</span>friendRelations<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> aliceId <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'Alice'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> bobId <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'Bob'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> db<span class="token punctuation">.</span>friendRelations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      friend1Id<span class="token operator">:</span> aliceId<span class="token punctuation">,</span>
      label<span class="token operator">:</span> <span class="token string">'loves'</span><span class="token punctuation">,</span>
      friend2Id<span class="token operator">:</span> bobId<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
38:["$","$1","56",{"children":["$","$L20","mdx-56",{"sx":{"mb":3,"background":"rgba(255, 255, 255, 0.05)","borderRadius":2,"border":"1px solid rgba(255, 255, 255, 0.1)","p":3,"mt":2,"overflow":"auto"},"children":["$","div",null,{"className":"codeblock-container","style":{"position":"relative"},"children":[["$","$L51",null,{"code":"db.version(1).stores({\n  friends: '@id',\n  friendRelations: '[friend1Id+friend2Id+label]', // unique because referred to unique ids\n})\n\nfunction createTwoLovingFriends() {\n  return db.transaction('rw', db.friends, db.friendRelations, async () => {\n    const aliceId = await db.friends.add({ name: 'Alice' })\n    const bobId = await db.friends.add({ name: 'Bob' })\n    await db.friendRelations.add({\n      friend1Id: aliceId,\n      label: 'loves',\n      friend2Id: bobId,\n    })\n  })\n}\n"}],["$","pre",null,{"className":"prism-ts","children":["$","code",null,{"className":"prism-ts code-highlight","dangerouslySetInnerHTML":{"__html":"$56"}}]}]]}]}]}]
39:["$","$L21","mdx-57",{"variant":"h2","component":"h2","gutterBottom":true,"sx":{"mt":4},"children":"Examples: Migration"}]
3a:["$","$L21","mdx-58",{"variant":"body1","component":"div","paragraph":true,"children":"Migrating synced data can be a complex task as data might be shared between clients with different versions of the data. Some clients might have pending changes based on the older model."}]
3b:["$","$L21","mdx-59",{"variant":"body1","component":"div","paragraph":true,"children":"Dexie's ordinary upgrading framework operates on local data only and before the dexie-cloud-addon has been invoked to setup its required data."}]
3c:["$","$L21","mdx-62",{"variant":"body1","component":"div","paragraph":true,"children":["For these reasons, a Dexie Cloud app need to be written to avoid migrations. Should a migration be needed anyway, the recommendation is currently to create a new database and manually migrate the data using ",["$","$L22","mdx-60",{"href":"/cloud/docs/cli#export","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"npx dexie-cloud export"}],", migrate it off-line and then import it to the new database using ",["$","$L22","mdx-61",{"href":"/cloud/docs/cli#import","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"npx dexie-cloud import"}],"."]}]
3d:["$","$L21","mdx-63",{"variant":"h3","component":"h3","gutterBottom":true,"sx":{"mt":3},"children":"Ad-hoc Migration"}]
3e:["$","$L21","mdx-64",{"variant":"body1","component":"div","paragraph":true,"children":"There are patterns to avoid migrations by letting your app continue to support the old and new model and migrating data ad-hoc. This is not a perfect nor fully consistent solution, but the best alternative to full migration."}]
3f:["$","$L21","mdx-65",{"variant":"body1","component":"div","paragraph":true,"children":"If taking the example of having a table of friends with name and age, and in the new version, split the name in firstName and lastName:"}]
57:Tbea,<span class="token keyword">function</span> <span class="token function">migrateFriend</span><span class="token punctuation">(</span>friend<span class="token operator">:</span> Friend<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token keyword">in</span> friend<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">'firstName'</span> <span class="token keyword">in</span> friend<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Already migrated</span>
    <span class="token keyword">return</span> friend
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// Return migrated instance for your app to render:</span>
    <span class="token keyword">const</span> nameSplit <span class="token operator">=</span> friend<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>friendClone<span class="token punctuation">,</span> friend<span class="token punctuation">)</span>
    <span class="token keyword">delete</span> friendClone<span class="token punctuation">.</span>name
    friendClone<span class="token punctuation">.</span>firstName <span class="token operator">=</span> nameSplit<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    friendClone<span class="token punctuation">.</span>lastName <span class="token operator">=</span> nameSplit<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> friendClone
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

db<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span><span class="token string">'reading'</span><span class="token punctuation">,</span> migrateFriend<span class="token punctuation">)</span> <span class="token comment">// Let all queries that return friends go through the migrator</span>
40:["$","$1","72",{"children":["$","$L20","mdx-66",{"sx":{"mb":3,"background":"rgba(255, 255, 255, 0.05)","borderRadius":2,"border":"1px solid rgba(255, 255, 255, 0.1)","p":3,"mt":2,"overflow":"auto"},"children":["$","div",null,{"className":"codeblock-container","style":{"position":"relative"},"children":[["$","$L51",null,{"code":"function migrateFriend(friend: Friend) {\n  if (!('name' in friend) && 'firstName' in friend) {\n    // Already migrated\n    return friend\n  } else {\n    // Return migrated instance for your app to render:\n    const nameSplit = friend.name.split(' ')\n    Object.assign(friendClone, friend)\n    delete friendClone.name\n    friendClone.firstName = nameSplit[0]\n    friendClone.lastName = nameSplit.slice(1).join(' ')\n    return friendClone\n  }\n}\n\ndb.friends.hook('reading', migrateFriend) // Let all queries that return friends go through the migrator\n"}],["$","pre",null,{"className":"prism-ts","children":["$","code",null,{"className":"prism-ts code-highlight","dangerouslySetInnerHTML":{"__html":"$57"}}]}]]}]}]}]
41:["$","$L21","mdx-68",{"variant":"body1","component":"div","paragraph":true,"children":["Notice however that queries such as ",["$","$L20","mdx-67",{"component":"code","sx":{"fontFamily":"monospace","fontSize":"0.875rem","backgroundColor":"rgba(255, 255, 255, 0.1)","px":1,"py":0.5,"borderRadius":1},"children":"db.friends.where({firstName: 'foo'}).toArray()"}]," won't match the non-migrated entities so queries might need to be adjusted to support both models."]}]
42:["$","$L21","mdx-69",{"variant":"h3","component":"h3","gutterBottom":true,"sx":{"mt":3},"children":"Migrating by exporting and importing"}]
43:["$","$L58","mdx-79",{"component":"ol","sx":{"mb":3,"pl":4,"listStyleType":"decimal","& .MuiListItem-root":{"display":"list-item","pl":1}},"children":["\n",["$","$L59","mdx-72",{"sx":{"py":0.25,"display":"list-item","pl":2},"children":["\n",["$","$L21","mdx-70",{"variant":"body1","component":"div","paragraph":true,"children":"Export the database"}],"\n",["$","$1","3",{"children":["$","$L20","mdx-71",{"sx":{"mb":3,"background":"rgba(255, 255, 255, 0.05)","borderRadius":2,"border":"1px solid rgba(255, 255, 255, 0.1)","p":3,"mt":2,"overflow":"auto"},"children":["$","div",null,{"className":"codeblock-container","style":{"position":"relative"},"children":[["$","$L51",null,{"code":"npx dexie-cloud export current-database.json\n"}],["$","pre",null,{"className":"prism-javascript","children":["$","code",null,{"className":"prism-javascript code-highlight","dangerouslySetInnerHTML":{"__html":"npx dexie<span class=\"token operator\">-</span>cloud <span class=\"token keyword\">export</span> current<span class=\"token operator\">-</span>database<span class=\"token punctuation\">.</span>json\n"}}]}]]}]}]}],"\n"]}],"\n",["$","$L59","mdx-75",{"sx":{"py":0.25,"display":"list-item","pl":2},"children":["\n",["$","$L21","mdx-73",{"variant":"body1","component":"div","paragraph":true,"children":"Write a node script that migrates the JSON file and produces a new file"}],"\n",["$","$1","3",{"children":["$","$L20","mdx-74",{"sx":{"mb":3,"background":"rgba(255, 255, 255, 0.05)","borderRadius":2,"border":"1px solid rgba(255, 255, 255, 0.1)","p":3,"mt":2,"overflow":"auto"},"children":["$","div",null,{"className":"codeblock-container","style":{"position":"relative"},"children":[["$","$L51",null,{"code":"node migrationScript.js < current-database.json > upgraded-database.json\n"}],["$","pre",null,{"className":"prism-javascript","children":["$","code",null,{"className":"prism-javascript code-highlight","dangerouslySetInnerHTML":{"__html":"node migrationScript<span class=\"token punctuation\">.</span>js <span class=\"token operator\">&lt;</span> current<span class=\"token operator\">-</span>database<span class=\"token punctuation\">.</span>json <span class=\"token operator\">></span> upgraded<span class=\"token operator\">-</span>database<span class=\"token punctuation\">.</span>json\n"}}]}]]}]}]}],"\n"]}],"\n",["$","$L59","mdx-78",{"sx":{"py":0.25,"display":"list-item","pl":2},"children":["\n",["$","$L21","mdx-76",{"variant":"body1","component":"div","paragraph":true,"children":"Import the new file to another database"}],"\n",["$","$1","3",{"children":["$","$L20","mdx-77",{"sx":{"mb":3,"background":"rgba(255, 255, 255, 0.05)","borderRadius":2,"border":"1px solid rgba(255, 255, 255, 0.1)","p":3,"mt":2,"overflow":"auto"},"children":["$","div",null,{"className":"codeblock-container","style":{"position":"relative"},"children":[["$","$L51",null,{"code":"npx dexie-cloud import upgraded-database.json\n"}],["$","pre",null,{"className":"prism-javascript","children":["$","code",null,{"className":"prism-javascript code-highlight","dangerouslySetInnerHTML":{"__html":"npx dexie<span class=\"token operator\">-</span>cloud <span class=\"token keyword\">import</span> upgraded<span class=\"token operator\">-</span>database<span class=\"token punctuation\">.</span>json\n"}}]}]]}]}]}],"\n"]}],"\n"]}]
44:["$","$L21","mdx-80",{"variant":"h3","component":"h3","gutterBottom":true,"sx":{"mt":3},"children":"Populate private singletons"}]
45:["$","$L21","mdx-83",{"variant":"body1","component":"div","paragraph":true,"children":["Populating data on DB creation can result in multiple objects being added for the same user in case the user later on open the app on another device and logs in, or if the user logs out and logs in. To avoid this, use a private ID and use ",["$","$L22","mdx-81",{"href":"/docs/Table/Table.put()","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"Table.put()"}]," rather than ",["$","$L22","mdx-82",{"href":"/docs/Table/Table.add()","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"Table.add()"}],". These data entities will work the same no matter if user is logged in or not and will be persisted in the cloud once user has logged in. If user goes to a new device these entities will be overwritten but no additional items would be created."]}]
46:["$","$L21","mdx-84",{"variant":"body1","component":"div","paragraph":true,"children":"Private singletons are persisted on the cloud database just like normal objects but their primary key lives within a private namespace and cannot collide with other user's."}]
5a:Td25,<span class="token keyword">import</span> <span class="token punctuation">{</span> Dexie <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'dexie'</span>
<span class="token keyword">import</span> dexieCloud <span class="token keyword">from</span> <span class="token string">'dexie-cloud-addon'</span>

<span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dexie</span><span class="token punctuation">(</span><span class="token string">'myDB'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> addons<span class="token operator">:</span> <span class="token punctuation">[</span>dexieCloud<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stores</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  myReadingLists<span class="token operator">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>on<span class="token punctuation">.</span>populate<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// In on.populate() don't use the DB directly because dexie-cloud-addon hasn't yet been</span>
  <span class="token comment">// initialized. Instead subscribe for db.on.ready here and populate the data from there.</span>
  db<span class="token punctuation">.</span>on<span class="token punctuation">.</span>ready<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// Create default placeholders for each user</span>
    db<span class="token punctuation">.</span>myReadingLists<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      id<span class="token operator">:</span> <span class="token string">'#favourites'</span><span class="token punctuation">,</span> <span class="token comment">// # = Private ID</span>
      name<span class="token operator">:</span> <span class="token string">'My favourites'</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
47:["$","$1","86",{"children":["$","$L20","mdx-85",{"sx":{"mb":3,"background":"rgba(255, 255, 255, 0.05)","borderRadius":2,"border":"1px solid rgba(255, 255, 255, 0.1)","p":3,"mt":2,"overflow":"auto"},"children":["$","div",null,{"className":"codeblock-container","style":{"position":"relative"},"children":[["$","$L51",null,{"code":"import { Dexie } from 'dexie'\nimport dexieCloud from 'dexie-cloud-addon'\n\nconst db = new Dexie('myDB', { addons: [dexieCloud] })\ndb.version(1).stores({\n  myReadingLists: 'id',\n})\ndb.on.populate.subscribe(() => {\n  // In on.populate() don't use the DB directly because dexie-cloud-addon hasn't yet been\n  // initialized. Instead subscribe for db.on.ready here and populate the data from there.\n  db.on.ready.subscribe((db) => {\n    // Create default placeholders for each user\n    db.myReadingLists.put({\n      id: '#favourites', // # = Private ID\n      name: 'My favourites',\n    })\n  })\n})\n"}],["$","pre",null,{"className":"prism-ts","children":["$","code",null,{"className":"prism-ts code-highlight","dangerouslySetInnerHTML":{"__html":"$5a"}}]}]]}]}]}]
48:["$","$L21","mdx-86",{"variant":"h2","component":"h2","gutterBottom":true,"sx":{"mt":4},"children":"Examples: Consistent Operations"}]
49:["$","$L21","mdx-92",{"variant":"body1","component":"div","paragraph":true,"children":["By using ",["$","$L22","mdx-87",{"href":"/docs/Collection/Collection.modify()","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"Collection.modify()"}]," and ",["$","$L22","mdx-88",{"href":"/docs/Collection/Collection.delete()","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"Collection.delete()"}]," the where-conditions are propagated all the way to the server and re-executed on sync. By formulating the condition in the same expression that has the ",["$","$L20","mdx-89",{"component":"code","sx":{"fontFamily":"monospace","fontSize":"0.875rem","backgroundColor":"rgba(255, 255, 255, 0.1)","px":1,"py":0.5,"borderRadius":1},"children":".modify()"}]," or ",["$","$L20","mdx-90",{"component":"code","sx":{"fontFamily":"monospace","fontSize":"0.875rem","backgroundColor":"rgba(255, 255, 255, 0.1)","px":1,"py":0.5,"borderRadius":1},"children":".delete()"}]," call, the condition is preserved on the server and maintains the operation consistently. See also ",["$","$L22","mdx-91",{"href":"/cloud/docs/consistency#consistent-modify--and-delete-operations","color":"primary","sx":{"fontWeight":600},"underline":"hover","children":"Consistency in Dexie Cloud"}],"."]}]
4a:["$","$L21","mdx-93",{"variant":"h3","component":"h3","gutterBottom":true,"sx":{"mt":3},"children":"Avoid this"}]
5b:T891,<span class="token keyword">function</span> <span class="token function">deleteTodoList</span><span class="token punctuation">(</span>todoListId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">'rw'</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span>todoLists<span class="token punctuation">,</span> db<span class="token punctuation">.</span>todoItems<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> itemIds <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>todoItems
      <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span> todoListId<span class="token operator">:</span> todoListId <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">primaryKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> db<span class="token punctuation">.</span>todoItems<span class="token punctuation">.</span><span class="token function">bulkDelete</span><span class="token punctuation">(</span>itemIds<span class="token punctuation">)</span>
    <span class="token keyword">await</span> db<span class="token punctuation">.</span>todoLists<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>todoListId<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
4b:["$","$1","94",{"children":["$","$L20","mdx-94",{"sx":{"mb":3,"background":"rgba(255, 255, 255, 0.05)","borderRadius":2,"border":"1px solid rgba(255, 255, 255, 0.1)","p":3,"mt":2,"overflow":"auto"},"children":["$","div",null,{"className":"codeblock-container","style":{"position":"relative"},"children":[["$","$L51",null,{"code":"function deleteTodoList(todoListId) {\n  return db.transaction('rw', db.todoLists, db.todoItems, async () => {\n    const itemIds = await db.todoItems\n      .where({ todoListId: todoListId })\n      .primaryKeys()\n    await db.todoItems.bulkDelete(itemIds)\n    await db.todoLists.delete(todoListId)\n  })\n}\n"}],["$","pre",null,{"className":"prism-ts","children":["$","code",null,{"className":"prism-ts code-highlight","dangerouslySetInnerHTML":{"__html":"$5b"}}]}]]}]}]}]
4c:["$","$L21","mdx-95",{"variant":"body1","component":"div","paragraph":true,"children":"The example above will retrieve the primary keys of the items to delete as they were at the time on the client. This might not be true in case the client is offline. Even if the client is online, there might be other offline clients that has added items to the list and hasn't yet synced it. In both of these cases some items might be forgotten and left in the database pointing to a non-existing todoListId."}]
4d:["$","$L21","mdx-96",{"variant":"h3","component":"h3","gutterBottom":true,"sx":{"mt":3},"children":"Do this instead"}]
5c:T69e,<span class="token keyword">function</span> <span class="token function">deleteTodoList</span><span class="token punctuation">(</span>todoListId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">'rw'</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span>todoLists<span class="token punctuation">,</span> db<span class="token punctuation">.</span>todoItems<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    db<span class="token punctuation">.</span>todoItems<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span> todoListId<span class="token operator">:</span> todoListId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    db<span class="token punctuation">.</span>todoLists<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>todoListId<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
4e:["$","$1","100",{"children":["$","$L20","mdx-97",{"sx":{"mb":3,"background":"rgba(255, 255, 255, 0.05)","borderRadius":2,"border":"1px solid rgba(255, 255, 255, 0.1)","p":3,"mt":2,"overflow":"auto"},"children":["$","div",null,{"className":"codeblock-container","style":{"position":"relative"},"children":[["$","$L51",null,{"code":"function deleteTodoList(todoListId) {\n  return db.transaction('rw', db.todoLists, db.todoItems, () => {\n    db.todoItems.where({ todoListId: todoListId }).delete()\n    db.todoLists.delete(todoListId)\n  })\n}\n"}],["$","pre",null,{"className":"prism-ts","children":["$","code",null,{"className":"prism-ts code-highlight","dangerouslySetInnerHTML":{"__html":"$5c"}}]}]]}]}]}]
4f:["$","$L21","mdx-98",{"variant":"body1","component":"div","paragraph":true,"children":"This example formulates the condition of the deletion in a where-clause. The condition is persisted on the cloud and re-executed in case the data has changed from what it was on the client when it performed the operation. Any added todoItem will also be deleted. Also, if another offline client would add items to that list and sync later on, some time after we made our sync, the persisted where-clause will be applied onto the other client's added items (because the server sees that the other client's data was based on a snapshot before we did our sync). Thus the added items from that client won't be added and the other client would instead get their local data updated and all these items deleted along with the list in its sync response."}]
50:["$","$L20",null,{"component":"footer","sx":{"mt":5,"pt":4,"borderTop":1,"borderColor":"divider","display":"flex","justifyContent":"space-between","flexWrap":"wrap","gap":2},"children":[["$","$L21",null,{"variant":"caption","color":"text.secondary","children":"docs/best-practices"}],["$","$L21",null,{"variant":"caption","color":"text.secondary","children":["Last updated: ","10/20/2025"]}]]}]
1a:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
16:null
5d:I[27201,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"IconMark"]
18:{"metadata":[["$","title","0",{"children":"Dexie Cloud Best Practices | Dexie Cloud Documentation - Offline-First Sync & Auth | Dexie.js - Offline-First Database for JavaScript"}],["$","meta","1",{"name":"description","content":"Dexie Cloud best practices. Performance optimization, security guidelines, and architecture patterns for production offline-first apps."}],["$","meta","2",{"name":"author","content":"David Fahlander"}],["$","meta","3",{"name":"author","content":"Dexie.js Team"}],["$","meta","4",{"name":"keywords","content":"dexie cloud,offline first sync,real time sync,database synchronization,offline authentication,collaborative apps"}],["$","meta","5",{"name":"creator","content":"David Fahlander"}],["$","meta","6",{"name":"publisher","content":"Dexie.js"}],["$","meta","7",{"name":"robots","content":"index, follow"}],["$","meta","8",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","9",{"name":"category","content":"technology"}],["$","meta","10",{"name":"article:section","content":"Dexie Cloud Documentation"}],["$","meta","11",{"name":"article:tag","content":"dexie cloud, offline first sync, real time sync, database synchronization, offline authentication, collaborative apps"}],["$","link","12",{"rel":"canonical","href":"https://dexie.org/cloud/docs/best-practices"}],["$","meta","13",{"property":"og:title","content":"Dexie Cloud Best Practices - Dexie Cloud Documentation"}],["$","meta","14",{"property":"og:description","content":"Dexie Cloud best practices. Performance optimization, security guidelines, and architecture patterns for production offline-first apps."}],["$","meta","15",{"property":"og:url","content":"https://dexie.org/cloud/docs/best-practices"}],["$","meta","16",{"property":"og:image","content":"https://dexie.org/assets/images/dexie-cloud-docs-og.jpg"}],["$","meta","17",{"property":"og:image:width","content":"1200"}],["$","meta","18",{"property":"og:image:height","content":"630"}],["$","meta","19",{"property":"og:image:alt","content":"Dexie Cloud Best Practices - Dexie Cloud Documentation"}],["$","meta","20",{"property":"og:type","content":"article"}],["$","meta","21",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","22",{"name":"twitter:title","content":"Dexie Cloud Best Practices - Dexie Cloud"}],["$","meta","23",{"name":"twitter:description","content":"Dexie Cloud best practices. Performance optimization, security guidelines, and architecture patterns for production offline-first apps."}],["$","meta","24",{"name":"twitter:image","content":"https://dexie.org/assets/images/dexie-cloud-docs-og.jpg"}],["$","link","25",{"rel":"icon","href":"/favicon.ico?favicon.c269e170.ico","sizes":"48x48","type":"image/x-icon"}],["$","$L5d","26",{}]],"error":null,"digest":"$undefined"}
1d:"$18:metadata"
